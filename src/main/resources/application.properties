spring.application.name=oTP

# Database Connection
spring.datasource.url=jdbc:postgresql://db:5432/otp
spring.datasource.username=postgres
spring.datasource.password=0258


# Hibernate and JPA configurationsx`
# Automatically creates and updates tables in the database based on entities.
# If sets to "create", creates the tables on every application starts ( existing data wiped out )
spring.jpa.hibernate.ddl-auto=update
# Enables logging of SQL statements. Helpful for debugging
spring.jpa.show-sql=true
# Optimizes Hibernate for PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Disable query from controller or view
spring.jpa.open-in-view=false


# Google OAuth2 ??
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google


server.servlet.session.timeout=300s

# HTTP Keep-Alive ???? ?? (??? ??)
server.tomcat.keep-alive-timeout=20000

# ?? Keep-Alive ?? ?
server.tomcat.max-connections=100

# HTTP/2 ??? ?? Keep-Alive ?? (HTTP/2? ???? ??)
server.http2.keepalive-timeout=20s


## Naver OAuth2 ??
#spring.security.oauth2.client.registration.naver.client-id=?? ?? Client ID
#spring.security.oauth2.client.registration.naver.client-secret=?? ?? Client Secret
#spring.security.oauth2.client.registration.naver.client-authentication-method=client_secret_post
#spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.naver.client-name=Naver

# Kakao OAuth2 ??
#spring.security.oauth2.client.registration.kakao.client-id=?? ?? Client ID
#spring.security.oauth2.client.registration.kakao.client-secret=?? ?? Client Secret
#spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
#spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
#spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.kakao.client-name=Kakao

# Naver Provider ??
#spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
#spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
#spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
#spring.security.oauth2.client.provider.naver.user-info-authentication-method=header
#spring.security.oauth2.client.provider.naver.user-name-attribute=response

# Kakao Provider ??
#spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
#spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
#spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
#spring.security.oauth2.client.provider.kakao.user-info-authentication-method=header
#spring.security.oauth2.client.provider.kakao.user-name-attribute=id
